import{writeFile as p,readdirSync as m,readFileSync as a}from"node:fs";import{join as s}from"node:path";import{fileURLToPath as f}from"url";var l=f(new URL(".",import.meta.url)),h=class{payload={};templates=this.getTemplates().catch(e=>{throw new Error(e)});constructor(e){this.url=e}checkFieldValueLength(e){if(e.length>1024)throw new Error(`El valor se compone por ${e.length} car\xE1cteres, los campos de Embed de Discord permiten como m\xE1ximo 1024.`)}checkData(e){if(!e||e.type&&e.type!="rich")return new Promise(o=>o());if(typeof e=="string")return new Promise(o=>o());if(e.fields)return e.fields==[]?new Promise(o=>o()):new Promise(o=>{let n=[];for(let r=0;r<e.fields.length;r++)n.push(this.checkFieldValueLength(e.fields[r].value));Promise.all(n).then(()=>{o()})});throw new Error("Embed no v\xE1lido")}preparePayload(e){return new Promise((o,n)=>{try{this.checkData(e).catch(r=>{n(r)}),o(typeof e!="object"?this.payload={content:e}:this.payload={embeds:[e]})}catch(r){n(r)}})}createTemplate(e,o){let n=s(l,`../config/${e}.json`);if(!o)throw new Error("No has a\xF1adido datos a la plantilla.");return new Promise((r,t)=>{p(n,JSON.stringify([o],null,2),(i,c)=>{i&&t(i)}),this.templates[e]=o,r()})}getTemplates(){return new Promise((e,o)=>{this.templates=[];let n;m(s(l,"../config")).forEach(r=>{let t=a(s(l,`../config/${r}`));t||o(`El archivo ${r} est\xE1 vac\xEDo.`);try{n=JSON.parse(t)}catch{o(`El archivo ${r} est\xE1 vac\xEDo.`)}this.templates[r.split(".")[0]]=n}),e(this.templates)})}getSingleTemplate(e){return new Promise((o,n)=>{let r,t=s(l,`../config/${e}.json`),i=a(t);i||n("El archivo de la plantilla no se ha encontrado.");try{r=JSON.parse(i)}catch{n(`El archivo ${i} est\xE1 vac\xEDo.`)}o(r)})}sendTemplate(e,o){return new Promise((n,r)=>{try{if(e){let t=this.getSingleTemplate(e)[0].catch(i=>{throw new Error(i)});console.log(t),o&&o.title&&(t.title=o.title),fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({embeds:[t]})}).then(i=>i.json()).then(i=>n(i)).catch(i=>r(i))}else throw new Error("La plantilla no existe.")}catch(t){console.log(t)}})}send(e,o){return new Promise((n,r)=>{try{if(o)if(this.preparePayload(e),this.templates[o])fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({embeds:[this.templates[o]]})}).then(t=>t.json()).then(t=>n(t)).catch(t=>r(t));else{let t=this.getSingleTemplate(o).catch(i=>{throw new Error(i)});fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({embeds:[t[0]]})}).then(i=>i.json()).then(i=>n(i)).catch(i=>r(i))}else this.preparePayload(e).catch(t=>{r(t)}),fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.payload)}).then(t=>t.json()).then(t=>n(t)).catch(t=>r(t))}catch(t){console.log(t)}})}};export{h as default};
